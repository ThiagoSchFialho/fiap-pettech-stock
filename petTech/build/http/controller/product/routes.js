"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/http/controller/product/routes.ts
var routes_exports = {};
__export(routes_exports, {
  productRoutes: () => productRoutes
});
module.exports = __toCommonJS(routes_exports);

// src/entities/product.entity.ts
var import_typeorm2 = require("typeorm");

// src/entities/category.entity.ts
var import_typeorm = require("typeorm");
var Category = class {
};
__decorateClass([
  (0, import_typeorm.PrimaryGeneratedColumn)("increment", {
    name: "id"
  })
], Category.prototype, "id", 2);
__decorateClass([
  (0, import_typeorm.Column)({ name: "name", type: "varchar" })
], Category.prototype, "name", 2);
__decorateClass([
  (0, import_typeorm.Column)({
    name: "creation_date",
    type: "timestamp without time zone",
    default: () => "CURRENT_TIMESTAMP"
  })
], Category.prototype, "createdAT", 2);
Category = __decorateClass([
  (0, import_typeorm.Entity)({
    name: "category"
  })
], Category);

// src/entities/product.entity.ts
var Product = class {
};
__decorateClass([
  (0, import_typeorm2.PrimaryGeneratedColumn)("uuid", {
    name: "id"
  })
], Product.prototype, "id", 2);
__decorateClass([
  (0, import_typeorm2.Column)({
    name: "name",
    type: "varchar"
  })
], Product.prototype, "name", 2);
__decorateClass([
  (0, import_typeorm2.Column)({
    name: "description",
    type: "text"
  })
], Product.prototype, "description", 2);
__decorateClass([
  (0, import_typeorm2.Column)({
    name: "image_url",
    type: "varchar"
  })
], Product.prototype, "image_url", 2);
__decorateClass([
  (0, import_typeorm2.Column)({
    name: "price",
    type: "double precision"
  })
], Product.prototype, "price", 2);
__decorateClass([
  (0, import_typeorm2.ManyToMany)(() => Category, {
    cascade: true
  }),
  (0, import_typeorm2.JoinTable)({
    name: "product_category",
    joinColumn: {
      name: "product_id",
      referencedColumnName: "id"
    },
    inverseJoinColumn: {
      name: "category_id",
      referencedColumnName: "id"
    }
  })
], Product.prototype, "categories", 2);
Product = __decorateClass([
  (0, import_typeorm2.Entity)({
    name: "product"
  })
], Product);

// src/lib/typeorm/typeorm.ts
var import_typeorm3 = require("typeorm");

// src/env/index.ts
var import_config = require("dotenv/config");
var import_zod = require("zod");
var envSchema = import_zod.z.object({
  NODE_ENV: import_zod.z.enum(["development", "production", "test"]).default("development"),
  PORT: import_zod.z.coerce.number().default(3e3),
  DATABASE_USER: import_zod.z.string(),
  DATABASE_HOST: import_zod.z.string(),
  DATABASE_NAME: import_zod.z.string(),
  DATABASE_PASSWORD: import_zod.z.string(),
  DATABASE_PORT: import_zod.z.coerce.number(),
  JWT_SECRET: import_zod.z.string()
});
var _env = envSchema.safeParse(process.env);
if (!_env.success) {
  console.error("Invalid environment variables", _env.error.format());
  throw new Error("Invalid environment variables");
}
var env = _env.data;

// src/lib/typeorm/migrations/1718304389598-ProductAutoGeneratedUUID.ts
var ProductAutoGeneratedUUID1718304389598 = class {
  // Caminho feliz
  up(queryRunner) {
    return __async(this, null, function* () {
      yield queryRunner.query(`
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
      `);
      yield queryRunner.query(`
      ALTER TABLE product
      ALTER COLUMN id SET DEFAULT uuid_generate_v4();
      `);
    });
  }
  // Caso aconteça algum erro
  down(queryRunner) {
    return __async(this, null, function* () {
      yield queryRunner.query(`
      ALTER TABLE product
      ALTER COLUMN id DROP DEFAULT;
      `);
    });
  }
};

// src/lib/typeorm/typeorm.ts
var appDataSource = new import_typeorm3.DataSource({
  type: "postgres",
  host: env.DATABASE_HOST,
  port: env.DATABASE_PORT,
  username: env.DATABASE_USER,
  password: env.DATABASE_PASSWORD,
  database: env.DATABASE_NAME,
  entities: [Product, Category],
  // entities: ['src/entities/*.ts']  Você pode passar o caminho em vez da classe
  // mas dessa forma usando o "*.ts" ele vai pegar todos os arquivos .ts da pasta "entities"
  migrations: [ProductAutoGeneratedUUID1718304389598],
  logging: env.NODE_ENV === "development"
});
appDataSource.initialize().then(() => {
  console.log("Database with typeorm connected");
}).catch((error) => {
  console.error("Error connecting to database with typeorm", error);
});

// src/repositories/typeorm/product.repository.ts
var ProductRepository = class {
  constructor() {
    this.repository = appDataSource.getRepository(Product);
  }
  findAll(page, limit) {
    return __async(this, null, function* () {
      return this.repository.find({
        relations: ["categories"],
        skip: (page - 1) * limit,
        take: limit
      });
    });
  }
  findById(id) {
    return __async(this, null, function* () {
      return this.repository.findOne({
        relations: ["categories"],
        where: { id }
      });
    });
  }
  create(product) {
    return __async(this, null, function* () {
      return this.repository.save(product);
    });
  }
  update(product) {
    return __async(this, null, function* () {
      return this.repository.save(product);
    });
  }
  delete(id) {
    return __async(this, null, function* () {
      yield this.repository.delete(id);
    });
  }
};

// src/use-cases/create-product.ts
var CreateProductUseCase = class {
  constructor(productRepository) {
    this.productRepository = productRepository;
  }
  handler(product) {
    return __async(this, null, function* () {
      return this.productRepository.create(product);
    });
  }
};

// src/use-cases/factory/make-create-product-use-case.ts
function makeCreateProductUseCase() {
  const productRepository = new ProductRepository();
  const createProductUseCase = new CreateProductUseCase(productRepository);
  return createProductUseCase;
}

// src/http/controller/product/create.ts
var import_zod2 = require("zod");
function create(request, reply) {
  return __async(this, null, function* () {
    const registeBodySchema = import_zod2.z.object({
      name: import_zod2.z.string(),
      description: import_zod2.z.string(),
      image_url: import_zod2.z.string(),
      price: import_zod2.z.coerce.number(),
      categories: import_zod2.z.array(
        import_zod2.z.object({
          id: import_zod2.z.coerce.number().optional(),
          name: import_zod2.z.string()
        })
      ).optional()
    });
    const { name, description, image_url, price, categories } = registeBodySchema.parse(request.body);
    const createProductUseCase = makeCreateProductUseCase();
    const product = yield createProductUseCase.handler({
      name,
      description,
      image_url,
      price,
      categories
    });
    return reply.status(200).send(product);
  });
}

// src/use-cases/update-product.ts
var UpdateProductUseCase = class {
  constructor(productRepository) {
    this.productRepository = productRepository;
  }
  handler(product) {
    return __async(this, null, function* () {
      return this.productRepository.update(product);
    });
  }
};

// src/use-cases/factory/make-update-product-use-case.ts
function makeUpdateProductUseCase() {
  const productRepository = new ProductRepository();
  const updateProductUseCase = new UpdateProductUseCase(productRepository);
  return updateProductUseCase;
}

// src/http/controller/product/update.ts
var import_zod3 = require("zod");
function update(request, reply) {
  return __async(this, null, function* () {
    const registerParamsSchema = import_zod3.z.object({
      id: import_zod3.z.string()
    });
    const { id } = registerParamsSchema.parse(request.params);
    const registerBodySchema = import_zod3.z.object({
      name: import_zod3.z.string(),
      description: import_zod3.z.string(),
      image: import_zod3.z.string(),
      price: import_zod3.z.coerce.number(),
      categories: import_zod3.z.array(
        import_zod3.z.object({
          id: import_zod3.z.coerce.number(),
          name: import_zod3.z.string()
        })
      ).optional()
    });
    const { name, description, image, price, categories } = registerBodySchema.parse(request.body);
    const updateProductUseCase = makeUpdateProductUseCase();
    const product = yield updateProductUseCase.handler({
      id,
      name,
      description,
      image_url: image,
      price,
      categories: categories || []
    });
    return reply.status(200).send(product);
  });
}

// src/use-cases/find-all-products.ts
var FindAllProductsUseCase = class {
  constructor(productRepository) {
    this.productRepository = productRepository;
  }
  handler(page, limit) {
    return __async(this, null, function* () {
      return this.productRepository.findAll(page, limit);
    });
  }
};

// src/use-cases/factory/make-find-all-products-use-case.ts
function makeFindAllProductsUseCase() {
  const productRepository = new ProductRepository();
  const findAllProductsUseCase = new FindAllProductsUseCase(productRepository);
  return findAllProductsUseCase;
}

// src/http/controller/product/find-all-products.ts
var import_zod4 = require("zod");
function findAllProduct(request, reply) {
  return __async(this, null, function* () {
    const registerQuerySchema = import_zod4.z.object({
      page: import_zod4.z.coerce.number().default(1),
      limit: import_zod4.z.coerce.number().default(10)
    });
    const { page, limit } = registerQuerySchema.parse(request.query);
    const findAllProductsUseCase = makeFindAllProductsUseCase();
    const product = yield findAllProductsUseCase.handler(page, limit);
    return reply.status(200).send(product);
  });
}

// src/use-cases/delete-product.ts
var DeleteProductUseCase = class {
  constructor(productRepository) {
    this.productRepository = productRepository;
  }
  handler(id) {
    return __async(this, null, function* () {
      return this.productRepository.delete(id);
    });
  }
};

// src/use-cases/factory/make-delete-product-use-case.ts
function makeDeleteProductUseCase() {
  const productRepository = new ProductRepository();
  const deleteProductUseCase = new DeleteProductUseCase(productRepository);
  return deleteProductUseCase;
}

// src/http/controller/product/delete.ts
var import_zod5 = require("zod");
function deleteProduct(request, reply) {
  return __async(this, null, function* () {
    const registerParamsSchema = import_zod5.z.object({
      id: import_zod5.z.coerce.string()
    });
    const { id } = registerParamsSchema.parse(request.params);
    const deleteProductUseCase = makeDeleteProductUseCase();
    yield deleteProductUseCase.handler(id);
    return reply.status(204).send();
  });
}

// src/use-cases/errors/resource-not-found-error.ts
var ResourceNotFoundError = class extends Error {
  constructor() {
    super("Resource not found");
  }
};

// src/use-cases/find-product.ts
var FindProductUseCase = class {
  constructor(productRepository) {
    this.productRepository = productRepository;
  }
  handler(id) {
    return __async(this, null, function* () {
      const product = yield this.productRepository.findById(id);
      if (!product) throw new ResourceNotFoundError();
      return product;
    });
  }
};

// src/use-cases/factory/make-find-product-use-case.ts
function makeFindProductUseCase() {
  const productRepository = new ProductRepository();
  const findProductUseCase = new FindProductUseCase(productRepository);
  return findProductUseCase;
}

// src/http/controller/product/find-product.ts
var import_zod6 = require("zod");
function findProduct(request, reply) {
  return __async(this, null, function* () {
    const registerParamsSchema = import_zod6.z.object({
      id: import_zod6.z.coerce.string()
    });
    const { id } = registerParamsSchema.parse(request.params);
    const findProductUseCase = makeFindProductUseCase();
    const product = yield findProductUseCase.handler(id);
    return reply.status(200).send(product);
  });
}

// src/http/controller/product/routes.ts
function productRoutes(app) {
  return __async(this, null, function* () {
    app.get("/product", findAllProduct);
    app.get("/product/:id", findProduct);
    app.post("/product", create);
    app.put("/product/:id", update);
    app.delete("/product/:id", deleteProduct);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  productRoutes
});
